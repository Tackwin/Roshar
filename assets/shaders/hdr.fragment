#version 300 es
precision mediump float;
layout (location = 0) out vec4 frag_color;

in vec2 text_coord;

uniform sampler2D hdr_texture;

uniform float exposure;
uniform float gamma;

uniform sampler2D palette;
uniform vec2 palette_size;
vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 nearest_rgb(vec3 c) {
    vec2 closest = vec2(0, 0);
    for (float x = 0.0; x < 1.0; x += 1.0 / palette_size.x) {
        for (float y = 0.0; y < 1.0; y += 1.0 / palette_size.y) {
            float candidate = distance(texture(palette, vec2(x, y)).rgb, c);
            float best = distance(texture(palette, closest).rgb, c);
            if (best > candidate) closest = vec2(x, y);
        }
    }

    return texture(palette, closest).rgb;
}

vec3 nearest_hsv(vec3 c) {
    c = rgb2hsv(c);

    vec2 closest = vec2(0, 0);
    vec3 closest_color = rgb2hsv(texture(palette, closest).rgb);
    float closest_distance = distance(closest_color, c);

    for (float x = 0.0; x < 1.0; x += 1.0 / palette_size.x) {
        for (float y = 0.0; y < 1.0; y += 1.0 / palette_size.y) {
            vec3 candidate_color = rgb2hsv(texture(palette, vec2(x, y)).rgb);

            float candidate_distance = distance(c, candidate_color);


            if (closest_distance > candidate_distance) {
                closest = vec2(x, y);
                closest_color = candidate_color;
                closest_distance = candidate_distance;
            }
        }
    }

    return hsv2rgb(closest_color);
}

void main() {
    vec3 hdr_color = texture(hdr_texture, text_coord).rgb;
    //hdr_color = nearest_hsv(hdr_color);
    // reinhard
    // vec3 result = hdr_color / (hdr_color + vec3q(1.0));
    // exposure
    vec3 result = vec3(1.0) - exp(-hdr_color * exposure);
    // also gamma correct while we're at it       
    result = pow(result, vec3(1.0 / gamma));

    const float step = 1.0 / 255.0;

    frag_color = vec4(result, 1.0);
    //frag_color = vec4(round(result / step) * step, 1.0);
    //frag_color = texture(hdr_texture, text_coord).rgba;
    //frag_color.rgb = nearest_hsv(frag_color.rgb);
    vec3 hsv = rgb2hsv(frag_color.rgb);
    hsv = round(hsv / step) * step;
    frag_color.rgb = hsv2rgb(hsv);
}